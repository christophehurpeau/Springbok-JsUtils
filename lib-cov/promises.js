/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['promises.js']) {
  _$jscoverage['promises.js'] = [];
  _$jscoverage['promises.js'][1] = 0;
  _$jscoverage['promises.js'][2] = 0;
  _$jscoverage['promises.js'][3] = 0;
  _$jscoverage['promises.js'][4] = 0;
  _$jscoverage['promises.js'][6] = 0;
  _$jscoverage['promises.js'][8] = 0;
  _$jscoverage['promises.js'][9] = 0;
  _$jscoverage['promises.js'][10] = 0;
  _$jscoverage['promises.js'][12] = 0;
  _$jscoverage['promises.js'][13] = 0;
  _$jscoverage['promises.js'][16] = 0;
  _$jscoverage['promises.js'][18] = 0;
  _$jscoverage['promises.js'][19] = 0;
  _$jscoverage['promises.js'][20] = 0;
  _$jscoverage['promises.js'][22] = 0;
  _$jscoverage['promises.js'][25] = 0;
  _$jscoverage['promises.js'][26] = 0;
  _$jscoverage['promises.js'][28] = 0;
  _$jscoverage['promises.js'][29] = 0;
  _$jscoverage['promises.js'][30] = 0;
  _$jscoverage['promises.js'][33] = 0;
  _$jscoverage['promises.js'][34] = 0;
  _$jscoverage['promises.js'][36] = 0;
  _$jscoverage['promises.js'][38] = 0;
  _$jscoverage['promises.js'][39] = 0;
  _$jscoverage['promises.js'][40] = 0;
  _$jscoverage['promises.js'][42] = 0;
  _$jscoverage['promises.js'][43] = 0;
  _$jscoverage['promises.js'][44] = 0;
  _$jscoverage['promises.js'][49] = 0;
  _$jscoverage['promises.js'][50] = 0;
  _$jscoverage['promises.js'][51] = 0;
  _$jscoverage['promises.js'][52] = 0;
  _$jscoverage['promises.js'][53] = 0;
  _$jscoverage['promises.js'][54] = 0;
  _$jscoverage['promises.js'][55] = 0;
  _$jscoverage['promises.js'][57] = 0;
  _$jscoverage['promises.js'][59] = 0;
  _$jscoverage['promises.js'][60] = 0;
  _$jscoverage['promises.js'][61] = 0;
  _$jscoverage['promises.js'][62] = 0;
  _$jscoverage['promises.js'][63] = 0;
  _$jscoverage['promises.js'][66] = 0;
  _$jscoverage['promises.js'][67] = 0;
  _$jscoverage['promises.js'][70] = 0;
  _$jscoverage['promises.js'][74] = 0;
  _$jscoverage['promises.js'][75] = 0;
  _$jscoverage['promises.js'][76] = 0;
  _$jscoverage['promises.js'][77] = 0;
  _$jscoverage['promises.js'][79] = 0;
  _$jscoverage['promises.js'][80] = 0;
  _$jscoverage['promises.js'][81] = 0;
  _$jscoverage['promises.js'][82] = 0;
  _$jscoverage['promises.js'][85] = 0;
  _$jscoverage['promises.js'][91] = 0;
  _$jscoverage['promises.js'][92] = 0;
  _$jscoverage['promises.js'][93] = 0;
  _$jscoverage['promises.js'][95] = 0;
  _$jscoverage['promises.js'][99] = 0;
}
_$jscoverage['promises.js'].source = ["\"use strict\";","var S = require('./index');","var createdPromise;","var promises = {","  creator: function() {","    var resolveCallback,","        rejectCallback;","    var createdPromise = new Promise(function(resolve, reject) {","      resolveCallback = resolve;","      rejectCallback = reject;","    });","    var doneCallback = promises.resolveFromCallback(resolveCallback, rejectCallback);","    return [createdPromise, doneCallback];","  },","  done: function() {","    var resolveCallback,","        rejectCallback;","    createdPromise = new Promise(function(resolve, reject) {","      resolveCallback = resolve;","      rejectCallback = reject;","    });","    return promises.resolveFromCallback(resolveCallback, rejectCallback);","  },","  promise: function() {","    if (!createdPromise) {","      throw new Error('No promise in stack, done() should be called before');","    }","    var p = createdPromise;","    createdPromise = undefined;","    return p;","  },","  forEach: function(iterable, callback) {","    if (Array.isArray(iterable)) {","      return Promise.all(iterable.map(callback));","    }","    var keys = [],","        values = [];","    S.forEach(S.map(iterable, callback), function(value, index) {","      keys.push(index);","      values.push(value);","    });","    return Promise.all(values).then(function(results) {","      return S.map(iterable, function(value, index) {","        return results[keys.indexOf(index)];","      });","    });","  },","  forEachSeries: function(iterable, callback) {","    return new Promise(function(resolve, reject) {","      var entriesIterator = iterable.entries();","      var results = new iterable.constructor();","      var next = function() {","        var current = entriesIterator.next();","        if (current.done) {","          return resolve(results);","        }","        var key = current.value[0],","            value = current.value[1];","        var result = callback(value, key);","        if (result instanceof Promise) {","          result.then(function(result) {","            results[key] = result;","            next();","          }).catch(reject);","        } else {","          results[key] = result;","          setImmediate(next);","        }","      };","      next();","    });","  },","  whileTrue: function(conditionCallback, callback) {","    return new Promise(function(resolve, reject) {","      (function next() {","        if (!conditionCallback()) {","          resolve();","        }","        var result = callback();","        if (result instanceof Promise) {","          result.then(function() {","            setImmediate(next);","          }).catch(reject);","        } else {","          setImmediate(next);","        }","      })();","    });","  },","  resolveFromCallback: function(resolve, reject) {","    return function(err, result) {","      if (err) {","        return reject(err);","      }","      resolve(result);","    };","  }","};","module.exports = promises;","","//# sourceMappingURL=promises.js.map"];
_$jscoverage['promises.js'][1]++;
"use strict";
_$jscoverage['promises.js'][2]++;
var S = require("./index");
_$jscoverage['promises.js'][3]++;
var createdPromise;
_$jscoverage['promises.js'][4]++;
var promises = {creator: (function () {
  _$jscoverage['promises.js'][6]++;
  var resolveCallback, rejectCallback;
  _$jscoverage['promises.js'][8]++;
  var createdPromise = new Promise((function (resolve, reject) {
  _$jscoverage['promises.js'][9]++;
  resolveCallback = resolve;
  _$jscoverage['promises.js'][10]++;
  rejectCallback = reject;
}));
  _$jscoverage['promises.js'][12]++;
  var doneCallback = promises.resolveFromCallback(resolveCallback, rejectCallback);
  _$jscoverage['promises.js'][13]++;
  return [createdPromise, doneCallback];
}), done: (function () {
  _$jscoverage['promises.js'][16]++;
  var resolveCallback, rejectCallback;
  _$jscoverage['promises.js'][18]++;
  createdPromise = new Promise((function (resolve, reject) {
  _$jscoverage['promises.js'][19]++;
  resolveCallback = resolve;
  _$jscoverage['promises.js'][20]++;
  rejectCallback = reject;
}));
  _$jscoverage['promises.js'][22]++;
  return promises.resolveFromCallback(resolveCallback, rejectCallback);
}), promise: (function () {
  _$jscoverage['promises.js'][25]++;
  if ((! createdPromise)) {
    _$jscoverage['promises.js'][26]++;
    throw new Error("No promise in stack, done() should be called before");
  }
  _$jscoverage['promises.js'][28]++;
  var p = createdPromise;
  _$jscoverage['promises.js'][29]++;
  createdPromise = undefined;
  _$jscoverage['promises.js'][30]++;
  return p;
}), forEach: (function (iterable, callback) {
  _$jscoverage['promises.js'][33]++;
  if (Array.isArray(iterable)) {
    _$jscoverage['promises.js'][34]++;
    return Promise.all(iterable.map(callback));
  }
  _$jscoverage['promises.js'][36]++;
  var keys = [], values = [];
  _$jscoverage['promises.js'][38]++;
  S.forEach(S.map(iterable, callback), (function (value, index) {
  _$jscoverage['promises.js'][39]++;
  keys.push(index);
  _$jscoverage['promises.js'][40]++;
  values.push(value);
}));
  _$jscoverage['promises.js'][42]++;
  return Promise.all(values).then((function (results) {
  _$jscoverage['promises.js'][43]++;
  return S.map(iterable, (function (value, index) {
  _$jscoverage['promises.js'][44]++;
  return results[keys.indexOf(index)];
}));
}));
}), forEachSeries: (function (iterable, callback) {
  _$jscoverage['promises.js'][49]++;
  return new Promise((function (resolve, reject) {
  _$jscoverage['promises.js'][50]++;
  var entriesIterator = iterable.entries();
  _$jscoverage['promises.js'][51]++;
  var results = new (iterable.constructor)();
  _$jscoverage['promises.js'][52]++;
  var next = (function () {
  _$jscoverage['promises.js'][53]++;
  var current = entriesIterator.next();
  _$jscoverage['promises.js'][54]++;
  if (current.done) {
    _$jscoverage['promises.js'][55]++;
    return resolve(results);
  }
  _$jscoverage['promises.js'][57]++;
  var key = current.value[0], value = current.value[1];
  _$jscoverage['promises.js'][59]++;
  var result = callback(value, key);
  _$jscoverage['promises.js'][60]++;
  if ((result instanceof Promise)) {
    _$jscoverage['promises.js'][61]++;
    result.then((function (result) {
  _$jscoverage['promises.js'][62]++;
  results[key] = result;
  _$jscoverage['promises.js'][63]++;
  next();
}))["catch"](reject);
  }
  else {
    _$jscoverage['promises.js'][66]++;
    results[key] = result;
    _$jscoverage['promises.js'][67]++;
    setImmediate(next);
  }
});
  _$jscoverage['promises.js'][70]++;
  next();
}));
}), whileTrue: (function (conditionCallback, callback) {
  _$jscoverage['promises.js'][74]++;
  return new Promise((function (resolve, reject) {
  _$jscoverage['promises.js'][75]++;
  (function next() {
  _$jscoverage['promises.js'][76]++;
  if ((! conditionCallback())) {
    _$jscoverage['promises.js'][77]++;
    resolve();
  }
  _$jscoverage['promises.js'][79]++;
  var result = callback();
  _$jscoverage['promises.js'][80]++;
  if ((result instanceof Promise)) {
    _$jscoverage['promises.js'][81]++;
    result.then((function () {
  _$jscoverage['promises.js'][82]++;
  setImmediate(next);
}))["catch"](reject);
  }
  else {
    _$jscoverage['promises.js'][85]++;
    setImmediate(next);
  }
})();
}));
}), resolveFromCallback: (function (resolve, reject) {
  _$jscoverage['promises.js'][91]++;
  return (function (err, result) {
  _$jscoverage['promises.js'][92]++;
  if (err) {
    _$jscoverage['promises.js'][93]++;
    return reject(err);
  }
  _$jscoverage['promises.js'][95]++;
  resolve(result);
});
})};
_$jscoverage['promises.js'][99]++;
module.exports = promises;
